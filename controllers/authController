// Importamos las librerías y modelos necesarios
const bcrypt = require('bcryptjs'); // Para el hash de contraseñas
const Joi = require('joi'); // Para la validación de datos
const User = require('../models/User'); // Modelo de usuario
const jwt = require('jsonwebtoken'); // Para generar tokens JWT

// Esquema de validación para el registro de usuarios
const registerSchema = Joi.object({
  username: Joi.string().min(3).max(50).required(), // Nombre de usuario (mínimo 3 caracteres)
  email: Joi.string().email().required(), // Correo electrónico válido
  password: Joi.string()
    .min(8) // Contraseña con al menos 8 caracteres
    .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]+$/)
    .required() // Requerida y debe cumplir ciertos criterios (mayúsculas, minúsculas, números, caracteres especiales)
});

// Controlador para registrar un nuevo usuario
exports.register = async (req, res) => {
  const { error } = registerSchema.validate(req.body);
  if (error) return res.status(400).json({ error: error.details[0].message });

  const { username, email, password } = req.body;

  try {
    let user = await User.findOne({ email });
    if (user) return res.status(400).json({ error: 'El usuario ya existe' });

    user = new User({
      username,
      email,
      password: await bcrypt.hash(password, 10) // Hash de la contraseña antes de almacenarla
    });

    await user.save();
    res.status(201).json({ mensaje: 'Usuario registrado exitosamente' });
  } catch (error) {
    res.status(500).json({ error: 'Error del servidor' });
  }
};

// Esquema de validación para el inicio de sesión
const loginSchema = Joi.object({
  email: Joi.string().email().required(), // Correo electrónico válido
  password: Joi.string().min(8).required() // Contraseña con al menos 8 caracteres
});

// Controlador para el inicio de sesión
exports.login = async (req, res) => {
  const { error } = loginSchema.validate(req.body);
  if (error) return res.status(400).json({ error: error.details[0].message });

  const { email, password } = req.body;

  try {
    const user = await User.findOne({ email });
    if (!user) return res.status(400).json({ error: 'Credenciales inválidas' });

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).json({ error: 'Credenciales inválidas' });

    // Generamos un token JWT con el ID del usuario
    const token = jwt.sign({ userId: user._id }, 'your_jwt_secret', { expiresIn: '1h' });

    res.status(200).json({ mensaje: 'Inicio de sesión exitoso', token });
  } catch (error) {
    res.status(500).json({ error: 'Error del servidor' });
  }
};

// Esquema de validación para actualizar datos de usuario
const updateUserSchema = Joi.object({
  username: Joi.string().min(3).max(50), // Nuevo nombre de usuario (opcional)
  email: Joi.string().email(), // Nuevo correo electrónico (opcional)
  password: Joi.string().min(6) // Nueva contraseña (opcional)
});

// Controlador para actualizar datos de usuario
exports.updateUser = async (req, res) => {
  const { error } = updateUserSchema.validate(req.body);
  if (error) return res.status(400).json({ error: error.details[0].message });

  const updates = req.body;

  try {
    if (updates.password) {
      updates.password = await bcrypt.hash(updates.password, 10); // Hash de la nueva contraseña
    }

    const user = await User.findByIdAndUpdate(req.user.userId, updates, { new: true });
    if (!user) return res.status(404).json({ error: 'Usuario no encontrado' });

    res.status(200).json({ mensaje: 'Datos del usuario actualizados exitosamente', user });
  } catch (error) {
    res.status(500).json({ error: 'Error del servidor' });
  }
};
